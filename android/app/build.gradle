plugins {
    id 'com.github.ben-manes.versions' version '0.47.0'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keyProperties = new Properties()
def keyPropertiesFile = rootProject.file('../secrets/android/key.properties')
if (keyPropertiesFile.exists()) {
    keyProperties.load(new FileInputStream(keyPropertiesFile))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
// https://github.com/flutter/flutter/blob/stable/packages/flutter_tools/gradle/flutter.gradle
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply from: '../constants.gradle'

android {
    namespace "dev.hrishikesh_kadam.flutter.space_data_explorer"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId constants.applicationId
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        manifestPlaceholders += [ applicationLabel:constants.appNameSnakeCase ]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        if (keyPropertiesFile.exists()) {
            release {
                storeFile file(keyProperties['releaseStoreFile'])
                storePassword keyProperties['releaseStoreAndKeyPassword']
                keyAlias keyProperties['releaseKeyAlias']
                keyPassword keyProperties['releaseStoreAndKeyPassword']
            }
            nonRelease {
                storeFile file(keyProperties['nonReleaseStoreFile'])
                storePassword keyProperties['nonReleaseStoreAndKeyPassword']
                keyAlias keyProperties['nonReleaseKeyAlias']
                keyPassword keyProperties['nonReleaseStoreAndKeyPassword']
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            if (keyPropertiesFile.exists()) {
                signingConfig signingConfigs.nonRelease
            } else {
                signingConfig signingConfigs.debug
            }
        }
        profile {
            applicationIdSuffix ".profile"
            versionNameSuffix "-profile"
            if (keyPropertiesFile.exists()) {
                signingConfig signingConfigs.nonRelease
            } else {
                signingConfig signingConfigs.debug
            }
        }
        release {
            applicationIdSuffix ".release"
            versionNameSuffix "-release"
        }
    }

    flavorDimensions "env"
    productFlavors {
        dev {
            dimension "env"
            manifestPlaceholders = [ hostName:constants.devHostName ]
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            if (keyPropertiesFile.exists()) {
                signingConfig signingConfigs.nonRelease
            } else {
                signingConfig signingConfigs.debug
            }
        }
        stag {
            dimension "env"
            manifestPlaceholders = [ hostName:constants.stagHostName ]
            applicationIdSuffix ".stag"
            versionNameSuffix "-stag"
            if (keyPropertiesFile.exists()) {
                signingConfig signingConfigs.nonRelease
            } else {
                signingConfig signingConfigs.debug
            }
        }
        prod {
            dimension "env"
            manifestPlaceholders = [ hostName:constants.prodHostName ]
            applicationIdSuffix ".prod"
            versionNameSuffix "-prod"
            if (keyPropertiesFile.exists()) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }
}

// https://developer.android.com/build/extend-agp#variant-api-artifacts-tasks
// https://developer.android.com/build/build-variants#filter-variants
// https://developer.android.com/reference/tools/gradle-api/7.4/com/android/build/api/variant/AndroidComponentsExtension
androidComponents {
    def all = selector().all()
    onVariants(all) { variant ->
        if(variant.flavorName == "prod" && variant.buildType == "release") {
            // https://android.googlesource.com/platform/tools/base/+/studio-main/build-system/gradle-core/src/main/java/com/android/build/api/component/analytics/AnalyticsEnabledApplicationVariant.kt
            variant.applicationId.set(android.defaultConfig.applicationId)
            variant.outputs.each { output ->
                // https://android.googlesource.com/platform/tools/base/+/studio-master-dev/build-system/gradle-core/src/main/java/com/android/build/api/variant/impl/VariantOutputImpl.kt
                if (output.versionName.get() == android.defaultConfig.versionName + "-prod-release") {
                    output.versionName.set(android.defaultConfig.versionName)
                }
            }
        }
        // variant.outputs.each { output ->
        //     output.outputFileName.set(constants.appNameSnakeCase + "-" + output.versionName.get() + ".apk")
        // }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Source - https://github.com/flutter/flutter/tree/main/packages/integration_test#android-device-testing
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task("printAllVariants") {
    doLast {
        println "applicationId,versionName,signingConfig.keyAlias"
        // https://developer.android.com/build/gradle-tips#create-different-versions-of-your-app
        android.applicationVariants.all { variant ->
            println variant.applicationId + "," \
                + variant.versionName + "," \
                + variant.signingConfig.keyAlias
        }
    }
}

task("getApplicationId") {
    doLast {
        android.applicationVariants.all { variant ->
            if (variant.name == variantName) {
                print variant.applicationId
                return
            }
        }
    }
}

// TODO(hrishikesh-kadam): Remove this once the following issue is resolved.
// https://github.com/flutter/flutter/issues/88005
project.gradle.startParameter.excludedTaskNames.add(':integration_test:lintDebug')
